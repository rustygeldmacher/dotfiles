#!/usr/bin/env ruby

require 'getoptlong'
require 'tempfile'

module GitBranchCheck
  INTEGRATION_BRANCH = "staging"

  class Collector
    attr_reader :path, :released, :in_integration, :in_development

    def initialize(args)
      @path = args[:path]
      @released = []
      @in_integration = []
      @in_development = []
    end

    def any?
      [released, in_integration, in_development].any?(&:any?)
    end

    def collect
      Dir.chdir(path) do
        all_branches = branch_list

        @released = branch_list("--merged #{default_branch}")
        (all_branches - released).each do |branch|
          if is_merged?(branch, default_branch)
            released << branch
          end
        end

        if integration_branch
          @in_integration = branch_list("--merged #{integration_branch}") - released
          (all_branches - released - in_integration).each do |branch|
            if is_merged?(branch, integration_branch)
              in_integration << branch
            end
          end
        end

        @in_development = all_branches - released - in_integration
      end
      self
    end

    def is_merged?(branch, target_branch)
      merge_base = `git merge-base #{target_branch} #{branch}`.strip
      is_merged = false
      Tempfile.create do |file|
        diff_command = "git diff --color=never #{merge_base}..#{branch}"
        file.write(`#{diff_command}`)
        file.close
        if system("git apply --reverse --check --quiet #{file.path}")
          is_merged = true
        end
      end

      # TODO: If still can't figure out, check if the PR was merged
      # gh pr view --json mergedAt | jq .mergedAt -r

      is_merged
    end

    def default_branch
      @default_branch ||= `git symbolic-ref refs/remotes/origin/HEAD`.strip.gsub('refs/remotes/origin/', '')
    end

    def integration_branch
      `git branch`.split.include?(INTEGRATION_BRANCH)
    end

    private

    def branch_list(command = '')
      `git branch #{command}`.split.reject do |branch|
        ['*', default_branch, integration_branch].include?(branch)
      end
    end
  end
end

module GitBranchCheck
  class Reporter
    attr_reader :collector

    def initialize(collector)
      @collector = collector
    end

    def report
      default_branch = collector.default_branch
      integration_branch = collector.integration_branch

      print_branches(collector.released, "Released (in #{default_branch})")
      if integration_branch
        print_branches(collector.in_integration, "In integration (in #{integration_branch}, not in #{default_branch})")
      end
      print_branches(collector.in_development, "In development (not merged)")
    end

    def print_branches(branches, header)
      if branches.any?
        puts "* #{header}"
        branches.each do |branch|
          puts "  - #{branch}"
        end
      end
    end
  end
end

module GitBranchCheck
  class Cleaner
    attr_reader :collector

    def initialize(collector)
      @collector = collector
    end

    def clean
      return if collector.released.empty?

      puts "* Cleaning up released branches..."

      Dir.chdir(collector.path) do
        collector.released.each do |branch|
          puts "  - #{branch}"
          system("git branch -D #{branch} &> /dev/null")
          system("git push origin :#{branch} &> /dev/null")
        end
      end
    end
  end
end

options = GetoptLong.new(
  ['--clean', GetoptLong::NO_ARGUMENT]
)

args = {
  path: Dir.pwd,
  fix: false
}

options.each do |option, value|
  case option
  when '--clean'
    args[:clean] = true
  end
end

args[:path] = ARGV[0] || args[:path]

collector = GitBranchCheck::Collector.new(args)

if collector.collect.any?
  GitBranchCheck::Reporter.new(collector).report
end

if args[:clean]
  GitBranchCheck::Cleaner.new(collector).clean
end
