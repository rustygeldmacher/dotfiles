" Leader
let mapleader = " "

" Use Vim config, not Vi
set nocompatible
" UTF8
set encoding=utf8
" Unix files
set fileformats=unix,dos,mac
" Swapfiles and backups are not needed
set noswapfile
set nobackup
set nowritebackup
" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500
" Show line numbers
set number
" Always show cursor position
set ruler
" Always show the status bar
set laststatus=2
" Consistent backspace behavior
set backspace=2
" Soft-tabs, two spaces
set tabstop=2
set softtabstop=2
set expandtab
" Indenting like you'd expect
set autoindent
set shiftwidth=2
set smartindent
" Show my searches as I type
set incsearch
if version >= 703
  " Show ruler at column 80
  set colorcolumn=80
endif
" Highlight my syntax
syntax on
" Display extra whitespace
set list listchars=tab:»·,trail:·
" highlight the current line
set cursorline
" airline already shows the mode for me
set noshowmode

" Vundle --------------------
filetype off
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'gmarik/Vundle.vim'
Plugin 'vim-scripts/genutils'
Plugin 'wincent/terminus'
Plugin 'editorconfig/editorconfig-vim'
Plugin 'tpope/vim-endwise'
Plugin 'scrooloose/nerdtree'
Plugin 'vim-scripts/greplace.vim'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'vim-scripts/SelectBuf'
Plugin 'kien/ctrlp.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tomtom/tcomment_vim'
Plugin 'jpalardy/vim-slime'
Plugin 'tpope/vim-ragtag'
Plugin 'christoomey/vim-tmux-runner'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'gabebw/vim-spec-runner'
Plugin 'gavinbeatty/vmath.vim'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'fidian/hexmode'
Plugin 'vim-syntastic/syntastic'

" Syntax plugins
Plugin 'vim-ruby/vim-ruby'
Plugin 'plasticboy/vim-markdown'
Plugin 'puppetlabs/puppet-syntax-vim'
Plugin 'Keithbsmiley/rspec.vim'
Plugin 'stephpy/vim-yaml'
Plugin 'rustygeldmacher/c99.vim'
Plugin 'JulesWang/css.vim'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'kchmck/vim-coffee-script'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'briancollins/vim-jst'
Plugin 'Glench/Vim-Jinja2-Syntax'

call vundle#end()
filetype plugin indent on
" End Vundle ----------------

" Sweet colors
if &term =~? 'mlterm\|xterm'
  set t_Co=256
endif
let base16colorspace=256  " Access colors present in 256 colorspace
set background=dark
colorscheme base16-tomorrow

" So you don't have to let go of Shift
command W w

" Make moving around in insert mode easy
imap <C-a> <Home>
imap <C-e> <End>

" Quickly save 
nmap <leader>w :w!<cr> 

" Tags
" C-] to jump in, C-[ to jump back
nnoremap <C-[> <C-T>
" C-, for prev, C-. for next
nnoremap <C-,> :tp<CR>
nnoremap <C-.> :tn<CR>

" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_javascript_checkers=['eslint']

" Don't check syntax for HTML files cuz the checker blows
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": ["html"] }

" vim-tmux-runner
" Make sure to enable the RVM version and gemset
let g:VtrInitialCommand = shellescape("cd . && set -o emacs")
let g:VtrClearSequence = ""

" vim-tmux-navigator
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <M-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <M-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <M-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <M-Right> :TmuxNavigateRight<cr>

" vim-spec-runner
map <Leader>t <Plug>RunCurrentSpecFile
map <Leader>r <Plug>RunFocusedSpec
map <Leader>e <Plug>RunMostRecentSpec
let g:spec_runner_preloader = ''

" Run Rspec in a tmux pane, if in a tmux session
if &term =~ '^screen'
  let g:spec_runner_dispatcher = "VtrSendCommand! {command}"
endif

if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
  map <Esc>[B <Down>
endif

" Search for the word under the cursor (Shift-K)
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" Search all files in current dir (Ctrl-Shift-K)
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap <C-S-K> :Ag<SPACE>

" vim-math
vnoremap <expr> + VMATH_YankAndAnalyse()

" No folding for vim-markdown
let g:vim_markdown_folding_disabled=1

" Remove trailing whitespace on save
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd FileType c,cpp,java,javascript,mkd,php,ruby,python,puppet,eruby,html,coffee,yaml,hbs autocmd BufWritePre <buffer> :call <SID>StripTrailingWhitespaces()

" NERDTree toggle w/ command-D (D for directory)
map <Leader>d :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Open NERDTree if we open an empty vim
function! StartUp()
  if 0 == argc()
    NERDTree
  end
endfunction
autocmd VimEnter * call StartUp()

" SelectBuf
nmap <unique> <silent> <Leader>b <Plug>SelectBuf

let g:ctrlp_root_markers = ['.ctrlp']
let g:ctrlp_working_path_mode = 'rw'
if executable('ag')
  set grepprg=ag\ --follow\ --nogroup\ --nocolor\ --ignore\ tags
  let g:ctrlp_user_command='ag %s -l --follow --nocolor -g ""'
  let g:ctrlp_use_caching=0
endif

" Airline
let g:airline_powerline_fonts = 1
let g:airline_theme='tomorrow'

" MacVim
set guifont=Monaco:h14

" Git commit messages
autocmd Filetype gitcommit set textwidth=72 fo=aw2tq

" Use Javascript syntax for .json files
au! BufRead,BufNewFile *.json set filetype=javascript

" Use Javascript syntax for .jsx files
au! BufRead,BufNewFile *.jsx set filetype=javascript

" Show highlight group of the text under the cursor
map ,hi :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">" . " FG:" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"fg#")<CR>

au FileType c setl ts=4 sw=4 sts=4 et

" vim--slime should use tmux
let g:slime_target = "tmux"

